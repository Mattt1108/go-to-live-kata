AWSTemplateFormatVersion: '2010-09-09'
Description: High Availability Architecture "go-to-live-kata"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "VPC"

  PubSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: "PubSubnet1"

  PubSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: "PubSubnet2"

  PrvSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: "PrvSubnet1"

  PrvSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: "PrvSubnet2"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # NAT

  EIPNAT1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIPNAT2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNAT1.AllocationId
      SubnetId: !Ref PubSubnet1

  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNAT2.AllocationId
      SubnetId: !Ref PubSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable2"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PrivateRoute1:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT1

  PrivateRoute2:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NAT2

  # associate the route table with the subnet

  PubSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet1
      RouteTableId: !Ref PublicRouteTable

  PubSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PubSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrvSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrvSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrvSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrvSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  SGEC2:  # SecurityGroup
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "SGEC2"
      GroupDescription: "Security group for EC2"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "LoadBalancer"
      Subnets:
        - !Ref PubSubnet1
        - !Ref PubSubnet2
      SecurityGroups:
        - !Ref SGEC2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "TargetGroup"
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: /index.php
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 5  # GB (MIN 5)
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: "5.7"
      MasterUsername: wordpress
      MasterUserPassword: matteomatteo
      DBName: wordpress
      MultiAZ: false
      StorageType: gp2
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: RDSSecurityGroup
      GroupDescription: Security group for RDS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref SGEC2

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrvSubnet1
        - !Ref PrvSubnet2

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-01dd271720c1ba44f  # AMI ubuntu 22.04
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref SGEC2
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Aggiorna i repository e il sistema
          apt update -y

          # Installa il pacchetto needrestart
          sudo apt install needrestart

          # Modifica il file di configurazione di needrestart per eseguire il riavvio automatico del kernel (-1 per 'a')
          sed -i "s/#\$nrconf{kernelhints} = -1;/\$nrconf{kernelhints} = -1;/g" /etc/needrestart/needrestart.conf

          # Configura needrestart per eseguire il riavvio automatico dei servizi invece che chiedere all'utente ('i' per 'a')
          sed -i "/#\$nrconf{restart} = 'i';/s/.*/\$nrconf{restart} = 'a';/" /etc/needrestart/needrestart.conf

          # Installa i pacchetti necessari per Apache, PHP, MySQL e altri componenti
          apt install -y apache2 \
                        ghostscript \
                        libapache2-mod-php \
                        mysql-server \
                        php \
                        php-bcmath \
                        php-curl \
                        php-imagick \
                        php-intl \
                        php-json \
                        php-mbstring \
                        php-mysql \
                        php-xml \
                        php-zip

          # Crea una directory per il sito web
          mkdir -p /srv/www

          # Imposta i permessi sulla directory del sito web per l'utente Apache, www-data
          chown www-data: /srv/www

          # Scarica e estrai l'ultima versione di WordPress nella directory del sito web
          curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www

          # Crea un file di configurazione Apache per il sito WordPress
          cat << EOF > /etc/apache2/sites-available/wordpress.conf
          <VirtualHost *:80>
             DocumentRoot /srv/www/wordpress
             <Directory /srv/www/wordpress>
                  Options FollowSymLinks
                  AllowOverride Limit Options FileInfo
                 DirectoryIndex index.php
                  Require all granted
             </Directory>
             <Directory /srv/www/wordpress/wp-content>
                  Options FollowSymLinks
                  Require all granted
             </Directory>
          </VirtualHost>
          EOF

          # Abilita il sito WordPress
          a2ensite wordpress

          # Abilita il modulo di rewrite di Apache
          a2enmod rewrite

          # Disabilita il sito predefinito di Apache (000-default)
          a2dissite 000-default

          # Ricarica il servizio Apache per applicare le modifiche di configurazione
          sudo service apache2 reload

          # Avvia il servizio MySQL
          service mysql start

          # Copia il file di configurazione di WordPress
          sudo -u www-data cp /srv/www/wordpress/wp-config-sample.php /srv/www/wordpress/wp-config.php

          # Configura il file di configurazione di WordPress con le informazioni del database
          sudo -u www-data sed -i 's/database_name_here/wordpress/' /srv/www/wordpress/wp-config.php
          sudo -u www-data sed -i 's/username_here/wordpress/' /srv/www/wordpress/wp-config.php
          sudo -u www-data sed -i 's/password_here/matteomatteo/' /srv/www/wordpress/wp-config.php
          sudo -u www-data sed -i 's/put your unique phrase here/ciao/' /srv/www/wordpress/wp-config.php
         
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "AutoScalingGroup"
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrvSubnet1
        - !Ref PrvSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup

Outputs:
  LoadBalancerEndpoint:
    Value: !GetAtt LoadBalancer.DNSName
    Description: "LoadBalancer DNSName"
